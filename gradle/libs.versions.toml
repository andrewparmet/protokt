# Copyright (c) 2022 Toast Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[versions]
autoService = "1.0.1"
grpc = "1.51.0"
grpcKotlin = "1.3.0"
kotlinPoet = "1.12.0"
kotlinxCoroutines = "1.5.2"
ktlint = "0.47.1"
protobuf = "3.21.7"
protobufJs = "6.11.3"
protobufGradlePlugin = "0.9.1"

# build
androidGradlePlugin = "7.4.0"
animalSnifferGradlePlugin = "1.5.4"
binaryCompatibilityValidator = "0.12.1"
download = "5.3.1"
gradleMavenPublishPlugin = "0.24.0"
kotlin = "1.8.10"
pluginPublish = "1.1.0"
spotless = "6.11.0"

# benchmarks
datasets = "0.1.0"
jmh = "1.26"
wire = "4.5.1"

# test
jackson = "2.13.0"
junit = "5.9.1"
truth = "1.1.3"

# third party
protoGoogleCommonProtos = "2.8.2"

[plugins]
download = { id = "de.undercouch.download", version.ref = "download" }
pluginPublish = { id = "com.gradle.plugin-publish", version.ref = "pluginPublish" }
wire = { id = "com.squareup.wire", version.ref = "wire" }

[libraries]
autoService = { module = "com.google.auto.service:auto-service", version.ref = "autoService" }
autoServiceAnnotations = { module = "com.google.auto.service:auto-service-annotations", version.ref = "autoService" }
grpcNetty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
grpcStub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
kotlinPoet = { module = "com.squareup:kotlinpoet", version.ref = "kotlinPoet" }
kotlinxCoroutinesCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
ktlint = { module = "com.pinterest.ktlint:ktlint-core", version.ref = "ktlint" }
ktlintStandardRuleSet = { module = "com.pinterest.ktlint:ktlint-ruleset-standard", version.ref = "ktlint" }
protobufGradlePlugin = { module = "com.google.protobuf:protobuf-gradle-plugin", version.ref = "protobufGradlePlugin" }
protobufJava = { module ="com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf" }

# build
androidGradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }
animalSnifferGradlePlugin = { module = "ru.vyarus:gradle-animalsniffer-plugin", version.ref = "animalSnifferGradlePlugin" }
binaryCompatibilityValidator = { module = "org.jetbrains.kotlinx:binary-compatibility-validator", version.ref = "binaryCompatibilityValidator" }
gradleMavenPublishPlugin = { module = "com.vanniktech:gradle-maven-publish-plugin", version.ref = "gradleMavenPublishPlugin" }
kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
spotlessGradlePlugin = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }

# benchmarks
jmhCore = { module = "org.openjdk.jmh:jmh-core", version.ref = "jmh" }
jmhGenerator = { module = "org.openjdk.jmh:jmh-generator-annprocess", version.ref = "jmh" }
wireRuntime = { module = "com.squareup.wire:wire-runtime", version.ref = "wire" }

# third party
protoGoogleCommonProtos = { module = "com.google.api.grpc:proto-google-common-protos", version.ref = "protoGoogleCommonProtos" }

# test
grpcKotlinGenerator = { module = "io.grpc:protoc-gen-grpc-kotlin", version.ref = "grpcKotlin" }
grpcKotlinStub = { module = "io.grpc:grpc-kotlin-stub", version.ref = "grpcKotlin" }
grpcTesting = { module = "io.grpc:grpc-testing", version.ref = "grpc" }
jackson = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
junit = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junitVintage = { module = "org.junit.vintage:junit-vintage-engine" }
protobufLite = { module = "com.google.protobuf:protobuf-javalite", version.ref = "protobuf" }
truth = { module = "com.google.truth:truth", version.ref = "truth" }
