/*
 * Copyright (c) 2019 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.toasttab.protokt.codegen.impl

import com.squareup.kotlinpoet.FileSpec
import com.toasttab.protokt.codegen.model.Import
import com.toasttab.protokt.codegen.model.PPackage
import com.toasttab.protokt.codegen.protoc.Protocol

object HeaderAccumulator {
    fun startFile(
        protocol: Protocol,
        imports: Set<Import>
    ): FileSpec.Builder =
        FileSpec.builder(`package`(protocol), "")
            // https://github.com/square/kotlinpoet/pull/533
            .addComment(
                """
                    Generated by protokt version ${protocol.desc.context.version}. Do not modify.
                    Source: ${protocol.desc.name}
                """.trimIndent()
            ).apply {
                imports.forEach {
                    when (it) {
                        is Import.Class -> addImport(it.pkg.toString(), it.pClass.nestedName)
                        is Import.ClassMethod -> it.value.invoke(this)
                        is Import.Literal -> it.value.invoke(this)
                        is Import.PackageMethod -> addImport(it.pkg.toString(), it.name)
                    }
                }
            }.indent("    ")

    private fun `package`(protocol: Protocol) =
        kotlinPackage(protocol).let {
            if (it == PPackage.DEFAULT) {
                ""
            } else {
                it.toString()
            }
        }
}
